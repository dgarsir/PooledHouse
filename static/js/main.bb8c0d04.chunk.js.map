{"version":3,"sources":["Components/Search/searchFunctions.js","images/logo.png","Components/TipInfoForm/TipInfoForm.js","graphql/mutations.js","graphql/queries.js","Components/Map/map.js","Components/Search/Search.js","Components/ViewTipInfo/UserTipInfo.js","Components/ViewTipInfo/ViewTipInfo.js","Components/ViewTipInfo/PositionOption.js","Components/ProcessTips/ViewProcessedTips.js","Components/ProcessTips/ProcessOption.js","Components/ViewTipInfo/ViewTipInfoList.js","aws-exports.js","graphql/subscriptions.js","App.js","serviceWorker.js","index.js","Components/Map/mapFunctions.js","Components/ProcessTips/ProcessTips.js"],"names":["exports","searchParse","tip_info","business_name_query","day","shift","position","results","Object","forEach","entry","e_day","Date","shift_date","getDay","shift_time","shift_position","business_name","toLowerCase","includes","hasOwnProperty","hours","totalHour","shift_length","tipsPerHour","takehome","business","neighborhood","module","__webpack_require__","p","TipInfoForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","state","user","business_street_address","business_city","business_state","business_zip","bind","assertThisInitialized","handleSubmit","preventDefault","t_e","id","Math","floor","random","console","log","API","graphql","graphqlOperation","input","alert","_context","t0","Auth","currentAuthenticatedUser","current_user","un","username","_this2","neighborhoods","hoodlist","push","label","_this$state","react_default","a","createElement","Container","fluid","Form","className","Row","Col","Group","controlID","Label","Control","type","onChange","controlId","as","placeholder","map","index","key","Button","variant","onClick","ev","React","Component","listTipEntrys","Map","handleReset","data","window_height","window","innerHeight","innerWidth","averageTipsClean","aTBNMasterParse","Card","bg","Body","md","conrolID","build_default","mapboxAccessToken","mapHeight","mapWidth","mapboxType","mapCenter","mapZoom","mapScrollZoom","neighborhoodOn","tooltip","tooltipSticky","neighborhoodStyle","weight","opacity","color","dashArray","fillOpacity","neighborhoodHoverStyle","excludeNeighborhoods","Search","search_query","raw_results","filter","keys","length","Table","ViewUserTips","tipInfo","tips","business_address","ViewTipInfo","filterdTipInfo","tipsInfo","businessName","Position","Tips","Hour","Shift","date","createBusinessTable","PositionOption","event","ViewTipsAverage","view","process","processedTips","averageTipsByBusiness","Number","parseFloat","toFixed","averageTipsByBusinessDay","bName","Saturday","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","ProcessOption","ViewTipInfoList","handleProcess","processFilter","handlePosition","positionFilter","detailList","buttons","showUserTips","ViewTipInfo_PositionOption","Components_ViewTipInfo_ViewTipInfo","ProcessTips_ProcessOption","ViewProcessedTips","awsmobile","aws_project_region","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_url","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","oauth","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","onCreateTipEntry","Amplify","configure","aws_config","App","handleSignOut","signOut","then","catch","err","handleHomeView","showSignUp","showListView","showMapView","showMyTipsView","handleMapView","showSearchView","handleListView","handleMyTipsView","handleSearchQueryChange","handleSearchSubmit","onNewTipEntry","prevQuery","newData","updatedQuery","assign","items","concat","curr_user_username","home","Navbar_default","Brand","href","src","logo","width","height","alt","Form_default","inline","FormControl_default","Button_default","ButtonGroup_default","ButtonToolbar_default","viewData","dist","query","queries","subscription","subscriptions","onSubscriptionMsg","_ref","loading","error","ViewTipInfo_ViewTipInfoList","mapData","_ref2","viewMyTips","Components_TipInfoForm_TipInfoForm","_ref3","UserTipInfo","viewSearch","_ref4","Components_Search_Search","multiView","withAuthenticator","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","getColor","amount","hoodName","average_tips","element","values","val","businessTipsByday","avg","address","averageTipsByPosition","businessTipsByPos","pos","Bartender","Server","Barback","Busser","Other","averageTipsByZipCode","businessZip","ZipBusinessCount","zip","add","business_count","size","Set","averageTipsByPositionAndShift"],"mappings":"2EAAAA,EAAQC,YAAc,SAACC,EAAUC,EAAqBC,EAAKC,EAAOC,GAE1D,IAAMC,EAAU,IAAIC,OAuBpB,OAtBAN,EAASO,QAAQ,SAAAC,GACb,IAAIC,EAAQ,IAAIC,KAAKF,EAAMG,YAAYC,SAEvC,GADAH,EAAQ,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAAYA,IAC3E,OAAPP,GAAgBO,GAASP,KAChB,OAATC,GAAmBK,EAAMK,YAAcV,KAC3B,OAAZC,GAAqBI,EAAMM,gBAAkBV,IACtCI,EAAMO,cAAcC,cAAcC,SAAShB,EAAoBe,eAAgB,CAC/E,IAAID,EAAgBP,EAAMO,cAC1B,GAAMV,EAAQa,eAAeH,GAMxB,CACD,IAAII,EAASd,EAAQU,GAAeK,UAAYZ,EAAMa,aACtDhB,EAAQU,GAAeO,YAAcjB,EAAQU,GAAeO,YAAcjB,EAAQU,GAAeK,UAAYD,EAAQX,EAAMe,SAAWJ,EACtId,EAAQU,GAAeK,UAAYD,OARnCd,EAAQU,GAAiB,CAACS,SAAUT,EACZU,aAAcjB,EAAMiB,aACpBH,YAAcd,EAAMe,SAAWf,EAAMa,aACrCD,UAAWZ,EAAMa,iBAUtDhB,wBCzBfqB,EAAA5B,QAAiB6B,EAAAC,EAAuB,6YCoRzBC,cAxQX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAA2B,KAAAJ,IACfE,EAAAzB,OAAA4B,EAAA,EAAA5B,CAAA2B,KAAA3B,OAAA6B,EAAA,EAAA7B,CAAAuB,GAAAO,KAAAH,KAAMH,KAmBVO,aAAe,SAACC,GACZP,EAAKQ,SAALjC,OAAAkC,EAAA,EAAAlC,CAAA,GAAiBgC,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SAnB1CZ,EAAKa,MAAQ,CACTC,KAAM,GACNxB,aAAc,GACdR,WAAY,KACZF,WAAY,GACZG,eAAgB,YAChBS,SAAU,GACVR,cAAe,GACf+B,wBAAyB,GACzBC,cAAe,GACfC,eAAgB,GAChBC,aAAc,GACdxB,aAAc,IAElBM,EAAKM,aAAeN,EAAKM,aAAaa,KAAlB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACpBA,EAAKqB,aAAerB,EAAKqB,aAAaF,KAAlB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KAjBLA,oHAwBAO,gFACfA,EAAEe,iBACEC,EAAM,CACNC,GAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UACrBb,KAAMZ,KAAKW,MAAMC,KACjBxB,aAAcY,KAAKW,MAAMvB,aACzBR,WAAYoB,KAAKW,MAAM/B,WACvBF,WAAYsB,KAAKW,MAAMjC,WACvBG,eAAgBmB,KAAKW,MAAM9B,eAC3BS,SAAUU,KAAKW,MAAMrB,SACrBR,cAAekB,KAAKW,MAAM7B,cAC1B+B,wBAAyBb,KAAKW,MAAME,wBACpCC,cAAed,KAAKW,MAAMG,cAC1BC,eAAgBf,KAAKW,MAAMI,eAC3BC,aAAchB,KAAKW,MAAMK,aACzBxB,aAAcQ,KAAKW,MAAMnB,cAE7BkC,QAAQC,IAAIN,qBAEFO,MAAIC,QAAQC,2BCpDH,wUDoD8C,CAACC,MAAOV,YACrEK,QAAQC,IAAIN,GACZW,MAAM,YACNhC,KAAKM,SAAS,CACVM,KAAM,GACNxB,aAAc,GACdR,WAAY,KACZF,WAAY,GACZG,eAAgB,YAChBS,SAAU,GACVR,cAAe,GACf+B,wBAAyB,GACzBC,cAAe,GACfC,eAAgB,GAChBC,aAAc,GACdxB,aAAc,uDAGlBkC,QAAQC,IAAI,4BAAZM,EAAAC,IACAF,MAAM,4SAKeG,OAAKC,kCAA1BC,SACAC,EAAKD,EAAaE,SACtBvC,KAAKM,SAAS,CACZM,KAAM0B,uIAIF,IAAAE,EAAAxC,KAEAyC,EAAgB,CAAE,oBAAqB,iBAAkB,eACvC,UAAW,YAAa,iBAAkB,eAC1C,eAAgB,qBAAsB,oBACtC,mBAAoB,WAAY,oBAAqB,mBACrD,iBAAkB,SAAU,WAAY,iBAAkB,eAC1D,kBAAmB,cAAe,eAAgB,eAAgB,sBAClE,cAAe,OAAQ,SAAU,mBAAoB,mBACrD,OAAQ,iBAAkB,kBAAmB,UAAW,cAAe,kBACvE,kBAAmB,qBAAsB,gBAG7DC,EAAW,GAEfD,EAAcnE,QAAQ,SAASkB,GAC3BkD,EAASC,KAAK,CAAEC,MAAOpD,EAAckB,MAAOlB,MAhB1C,IAAAqD,EA8BE7C,KAAKW,MAXLvB,EAnBFyD,EAmBEzD,aACAR,EApBFiE,EAoBEjE,WACAF,EArBFmE,EAqBEnE,WACAG,EAtBFgE,EAsBEhE,eACAS,EAvBFuD,EAuBEvD,SACAR,EAxBF+D,EAwBE/D,cACA+B,EAzBFgC,EAyBEhC,wBACAC,EA1BF+B,EA0BE/B,cACAC,EA3BF8B,EA2BE9B,eACAC,EA5BF6B,EA4BE7B,aACAxB,EA7BFqD,EA6BErD,aAGR,OACIsD,EAAAC,EAAAC,cAAA,WACJF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MAAM,QACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,UAAU,qBACZN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,cACdV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,mBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLlD,KAAK,aACLC,MAAOhC,EACPkF,SAAU5D,KAAKI,iBAI/B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYM,UAAU,cAClBf,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,mBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACQI,GAAG,SACHrD,KAAK,aACLC,MAAO9B,EACPgF,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,uBAIhBF,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,gBAClBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,6BACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,SACLlD,KAAK,eACLC,MAAOtB,EACPwE,SAAU5D,KAAKI,iBAI3B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,kBACdV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,iBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACII,GAAG,SACHrD,KAAK,iBACLC,MAAO7B,EACP+E,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,2BAKpBF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,YAClBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,qBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,SACLlD,KAAK,WACLC,MAAOpB,EACPsE,SAAU5D,KAAKI,iBAI3B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,iBAClBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,sBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLI,YAAY,qBACZtD,KAAK,gBACLC,MAAO5B,EACP8E,SAAU5D,KAAKI,iBAI3B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,2BAClBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,uBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLI,YAAY,oBACZtD,KAAK,0BACLC,MAAOG,EACP+C,SAAU5D,KAAKI,iBAI3B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,iBAClBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,aACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLI,YAAY,qBACZtD,KAAK,gBACLC,MAAOI,EACP8C,SAAU5D,KAAKI,iBAI3B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,kBAClBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,cACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLI,YAAY,UACZtD,KAAK,iBACLC,MAAOK,EACP6C,SAAU5D,KAAKI,iBAI3B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,gBAClBV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,gBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACIC,KAAK,OACLI,YAAY,aACZtD,KAAK,eACLC,MAAOM,EACP4C,SAAU5D,KAAKI,iBAI3B0C,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,gBACdV,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,qBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACII,GAAG,SACHrD,KAAK,eACLC,MAAOlB,EACPoE,SAAU5D,KAAKI,cACbqC,EAAcuB,IAAI,SAACxE,EAAcyE,GAC/B,OACInB,EAAAC,EAAAC,cAAA,UAAQkB,IAAKD,EAAOvD,MAAOlB,GAAeA,MAItDsD,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACAC,QAAQ,UACRT,KAAK,SACLU,QAAS,SAACC,GAAD,OAAQ9B,EAAKrB,aAAamD,KAHnC,yBA1PNC,IAAMC,6BEUnBC,EAAa,yeC0IXC,cAnJb,SAAAA,EAAY7E,GAAO,IAAAC,EAAA,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAA2B,KAAA0E,IACjB5E,EAAAzB,OAAA4B,EAAA,EAAA5B,CAAA2B,KAAA3B,OAAA6B,EAAA,EAAA7B,CAAAqG,GAAAvE,KAAAH,KAAMH,KAQRO,aAAe,SAACC,GACdP,EAAKQ,SAALjC,OAAAkC,EAAA,EAAAlC,CAAA,GAAiBgC,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,QAC1CgB,QAAQC,IAAI7B,EAAKa,MAAM1C,MAXN6B,EAcnB6E,YAAc,WACZ7E,EAAKQ,SACH,CACErC,IAAK,MACLC,MAAO,MACPC,SAAU,SAjBd2B,EAAKa,MAAQ,CACX1C,IAAK,MACLC,MAAO,MACPC,SAAU,OALK2B,wEA0BjB,IAYI8E,EAZEC,EAAgBC,OAAOC,YAavB9G,GAZe6G,OAAOE,WAYhBhF,KAAKW,MAAM1C,KACjBC,EAAQ8B,KAAKW,MAAMzC,MACnBC,EAAW6B,KAAKW,MAAMxC,SAY5B,OATAyG,EAAOK,2BACLC,0BACElF,KAAKH,MAAM9B,SACXiC,KAAKW,MAAM1C,IACX+B,KAAKW,MAAMzC,MACX8B,KAAKW,MAAMxC,WAKX2E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,MAAM,QACjBJ,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAMC,GAAG,SACPtC,EAAAC,EAAAC,cAACmC,EAAA,EAAKE,KAAN,KACAvC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,UAAU,oBACdN,EAAAC,EAAAC,cAACG,EAAA,EAAKE,IAAN,KACIP,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,MAAMM,GAAIR,IAAKgC,GAAG,KACtCxC,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,YACEX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACEI,GAAG,SACHrD,KAAK,MACLC,MAAOzC,EACP2F,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BAGNF,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYgC,SAAS,QAAQzB,GAAIR,IAAKgC,GAAG,KACvCxC,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,cACEX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACEI,GAAG,SACHrD,KAAK,QACLC,MAAOxC,EACP0F,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAGNF,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,WAAWM,GAAIR,IAAKgC,GAAG,KAC3CxC,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,iBACEX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACEI,GAAG,SACHrD,KAAK,WACLC,MAAOvC,EACPyF,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0BAIRF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKgC,GAAG,MACVxC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEL,GAAIR,IACJgC,GAAG,IACHlB,QAAQ,UACRT,KAAK,QACLU,QAASrE,KAAK2E,aALhB,gBAOA7B,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKgC,GAAG,UAKZxC,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKgC,GAAG,MACRxC,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACFR,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CACE0C,kBA7FkB,iGA+FlBC,UAAyB,IAAdb,EACXc,SAAS,MACTvC,UAAU,YACVwC,WAjGW,QAkGXC,UAjGa,CAAC,SAAU,SAkGxBC,QAjGK,GAkGLC,eAAe,EACfC,gBAAgB,EAChBC,SAAS,EACTC,eAAe,EACftB,KAAMA,EACNuB,kBArGkB,CAAEC,OAAQ,EAAGC,QAAS,EAAGC,MAAO,OAAQC,UAAW,IAAKC,YAAa,IAsGvFC,uBArGuB,CAAEL,OAAQ,EAAGE,MAAO,OAAQC,UAAW,IAAKC,YAAa,IAsGhFE,qBArGqB,CAAC,iBAAkB,mBAwG1C5D,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKgC,GAAG,eA7IAf,IAAMC,6BCkJTmC,cAhJX,SAAAA,EAAY9G,GAAO,IAAAC,EAAA,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAA2B,KAAA2G,IACf7G,EAAAzB,OAAA4B,EAAA,EAAA5B,CAAA2B,KAAA3B,OAAA6B,EAAA,EAAA7B,CAAAsI,GAAAxG,KAAAH,KAAMH,KAWVO,aAAe,SAACC,GACZP,EAAKQ,SAALjC,OAAAkC,EAAA,EAAAlC,CAAA,GAAiBgC,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,QAC1CgB,QAAQC,IAAI7B,EAAKa,MAAM1C,MAdR6B,EAiBjB6E,YAAc,WACZ7E,EAAKQ,SACH,CACErC,IAAK,MACLC,MAAO,MACPC,SAAU,SApBd2B,EAAKa,MAAQ,CACT1C,IAAK,MACLC,MAAO,MACPC,SAAU,OAGd2B,EAAKM,aAAeN,EAAKM,aAAaa,KAAlB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACpBA,EAAK6E,YAAc7E,EAAK6E,YAAY1D,KAAjB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KATJA,wEA2BV,IAAA+C,EAE4B7C,KAAKW,MAA9B1C,EAFH4E,EAEG5E,IAAKC,EAFR2E,EAEQ3E,MAAOC,EAFf0E,EAEe1E,SAEdJ,EAAWiC,KAAKH,MAAM9B,SACtB6I,EAAe5G,KAAKH,MAAM+G,aAC1BC,EAAc/I,sBAAYC,EAAU6I,EACV5G,KAAKW,MAAM1C,IAAK+B,KAAKW,MAAMzC,MAC3B8B,KAAKW,MAAMxC,UAErC2I,EACFhE,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAMC,GAAG,SACTtC,EAAAC,EAAAC,cAACmC,EAAA,EAAKE,KAAN,KACAvC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,UAAU,oBACdN,EAAAC,EAAAC,cAACG,EAAA,EAAKE,IAAN,KACIP,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,MAAMM,GAAIR,IAAKgC,GAAG,KACtCxC,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,YACEX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACEI,GAAG,SACHrD,KAAK,MACLC,MAAOzC,EACP2F,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BAGNF,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYgC,SAAS,QAAQzB,GAAIR,IAAKgC,GAAG,KACvCxC,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,cACEX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACEI,GAAG,SACHrD,KAAK,QACLC,MAAOxC,EACP0F,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,sBAGNF,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,CAAYC,UAAU,WAAWM,GAAIR,IAAKgC,GAAG,KAC3CxC,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,iBACEX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACEI,GAAG,SACHrD,KAAK,WACLC,MAAOvC,EACPyF,SAAU5D,KAAKI,cACf0C,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,0BAIRF,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKgC,GAAG,MACVxC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACEL,GAAIR,IACJgC,GAAG,IACHlB,QAAQ,UACRT,KAAK,QACLU,QAASrE,KAAK2E,aALhB,gBAOA7B,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAKgC,GAAG,UAOhB,OAAuC,GAAnCjH,OAAO0I,KAAKF,GAAaG,OAErBlE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,GAChBJ,EAAAC,EAAAC,cAAA,WACE8D,EACFhE,EAAAC,EAAAC,cAAA,gCAMAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,GAChBJ,EAAAC,EAAAC,cAAA,WACE8D,EACFhE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,KACInE,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BAGRF,EAAAC,EAAAC,cAAA,aACM3E,OAAO0I,KAAKF,GAAa7C,IAAI,SAAAE,GAC3B,OACIpB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAM6D,EAAY3C,GAAK3E,UACvBuD,EAAAC,EAAAC,cAAA,UAAM6D,EAAY3C,GAAK1E,cACvBsD,EAAAC,EAAAC,cAAA,UAAMzB,KAAKC,MAAMqF,EAAY3C,GAAK7E,4BApIjDkF,IAAMC,oHCcZ0C,EAtBM,SAACrH,GAmBlB,OAlBgBA,EAAMsH,QAAQL,OAAO,SAAAM,GAAI,OAAIA,EAAKxG,OAASf,EAAMe,OAI1CoD,IAAK,SAACoD,EAAMnD,GAC/B,OACInB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACXN,EAAAC,EAAAC,cAAA,MAAII,UAAU,YAAYgE,EAAKtI,eAC/BgE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QAAQgE,EAAKC,kBAC5BvE,EAAAC,EAAAC,cAAA,wBAAgBoE,EAAKvI,gBACrBiE,EAAAC,EAAAC,cAAA,sBAAcoE,EAAK9H,UACnBwD,EAAAC,EAAAC,cAAA,6BAAqBoE,EAAKhI,cAC1B0D,EAAAC,EAAAC,cAAA,2BAAmBoE,EAAKxI,YACxBkE,EAAAC,EAAAC,cAAA,qBAAaoE,EAAK1I,gBCuDnB4I,EAzBK,SAACzH,GAIjB,IAAI0H,EAAoC,iBAAnB1H,EAAM1B,SAA6B0B,EAAMsH,QAAQL,OAAO,SAAAM,GAAI,OAAIA,EAAKvI,iBAAmBgB,EAAM1B,WAAY0B,EAAMsH,QAkBrI,OAfAzF,QAAQC,IAzCwB,SAAC6F,GACjC,IAAMjI,EAAW,GAyBjB,OAxBAiI,EAASlJ,QAAQ,SAAA8I,GACb,IAAIK,EAAeL,EAAKtI,cAClBS,EAASN,eAAewI,GAW1BlI,EAASkI,GAAc9E,KAAK,CAExB9B,wBAAyBuG,EAAKvG,wBAA0B,KAAOuG,EAAKtG,cAAgB,KAAOsG,EAAKrG,eAAiB,IAAMqG,EAAKpG,aAC5H0G,SAAUN,EAAKvI,eACf8I,KAAOP,EAAK9H,SACZsI,KAAOR,EAAKhI,aACZyI,MAAQT,EAAKxI,WACbkJ,KAAOV,EAAK1I,aAjBhBa,EAASkI,GAAgB,CAAC,CAEtB5G,wBAAyBuG,EAAKvG,wBAA0B,KAAOuG,EAAKtG,cAAgB,KAAOsG,EAAKrG,eAAiB,IAAMqG,EAAKpG,aAC5H0G,SAAUN,EAAKvI,eACf8I,KAAOP,EAAK9H,SACZsI,KAAOR,EAAKhI,aACZyI,MAAQT,EAAKxI,WACbkJ,KAAOV,EAAK1I,eAcjBa,EAeKwI,CAAqBR,IACnBA,EAAevD,IAAK,SAACoD,EAAMnD,GACrC,OACInB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,WACXN,EAAAC,EAAAC,cAAA,MAAII,UAAU,YAAYgE,EAAKtI,eAC/BgE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QAAQgE,EAAKvG,wBAA0B,KAAOuG,EAAKtG,cAAgB,KAAOsG,EAAKrG,eAAiB,IAAMqG,EAAKpG,cAC1H8B,EAAAC,EAAAC,cAAA,wBAAgBoE,EAAKvI,gBACrBiE,EAAAC,EAAAC,cAAA,sBAAcoE,EAAK9H,UACnBwD,EAAAC,EAAAC,cAAA,6BAAqBoE,EAAKhI,cAC1B0D,EAAAC,EAAAC,cAAA,2BAAmBoE,EAAKxI,YACxBkE,EAAAC,EAAAC,cAAA,qBAAaoE,EAAK1I,gBCnCnBsJ,EArBQ,SAACnI,GAkBlB,OAhBEiD,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,KACET,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,yBACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACAI,GAAG,SACHF,SAAY,SAACqE,GAASpI,EAAM1B,SAAS8J,KACnCnF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,4CCqDDkF,EAnES,SAACrI,GAMrB,IAAI2H,EAAW3H,EAAMsH,QACjBgB,EAAO,GACX,GAAsB,aAAlBtI,EAAMuI,QAAwB,CAC9B,IAAMC,EAAgBC,gCAAsBd,GAC5CW,EAAO9J,OAAO0I,KAAKsB,GAAerE,IAAI,SAAAoD,GAClC,OACAtE,EAAAC,EAAAC,cAAA,OAAKI,UAAW,kBACZN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAII,UAAU,YAAYiF,EAAcjB,GAAMtI,eAC9CgE,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QAAQiF,EAAcjB,GAAMvG,0BAE/CiC,EAAAC,EAAAC,cAAA,sBAAcuF,OAAOC,WAAWH,EAAcjB,GAAM/H,aAAaoJ,QAAQ,GAAzE,iBAMP,GAAsB,kBAAlB5I,EAAMuI,QAA6B,CACxC,IAAMC,EAAgBK,mCAAyBlB,GAC/CW,EAAO9J,OAAO0I,KAAKsB,GAAerE,IAAI,SAAA2E,GAEnC,OADAjH,QAAQC,IAAIgH,GAER7F,EAAAC,EAAAC,cAAA,WACKtB,QAAQC,IAAI0G,EAAcM,IAC3B7F,EAAAC,EAAAC,cAAA,OAAKI,UAAU,gBACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YAAYuF,GAE3B7F,EAAAC,EAAAC,cAAA,WAAMuF,OAAOC,WAAWH,EAAcM,GAAOC,SAASvJ,aAAaoJ,QAAQ,IAC3E3F,EAAAC,EAAAC,cAAA,WAAMuF,OAAOC,WAAWH,EAAcM,GAAOE,OAAOxJ,aAAaoJ,QAAQ,IACzE3F,EAAAC,EAAAC,cAAA,WAAMuF,OAAOC,WAAWH,EAAcM,GAAOG,OAAOzJ,aAAaoJ,QAAQ,IACzE3F,EAAAC,EAAAC,cAAA,WAAMuF,OAAOC,WAAWH,EAAcM,GAAOI,QAAQ1J,aAAaoJ,QAAQ,IAC1E3F,EAAAC,EAAAC,cAAA,WAAMuF,OAAOC,WAAWH,EAAcM,GAAOK,UAAU3J,aAAaoJ,QAAQ,IAC5E3F,EAAAC,EAAAC,cAAA,WAAMuF,OAAOC,WAAWH,EAAcM,GAAOM,SAAS5J,aAAaoJ,QAAQ,IAC3E3F,EAAAC,EAAAC,cAAA,WAAMuF,OAAOC,WAAWH,EAAcM,GAAOO,OAAO7J,aAAaoJ,QAAQ,QAMzFN,EACArF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,wBACVN,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBAELF,EAAAC,EAAAC,cAAA,WACKmF,IAMZ,OAAOA,GCxCIgB,EAvBO,SAACtJ,GAoBjB,OAlBEiD,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACIL,EAAAC,EAAAC,cAACG,EAAA,EAAKI,MAAN,KACET,EAAAC,EAAAC,cAACG,EAAA,EAAKM,MAAN,8BACAX,EAAAC,EAAAC,cAACG,EAAA,EAAKO,QAAN,CACAI,GAAG,SACHF,SAAY,SAACqE,GAASpI,EAAMuI,QAAQH,KAChCnF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,yCCkDHoG,sBArDX,SAAAA,EAAYvJ,GAAO,IAAAC,EAAA,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAA2B,KAAAoJ,IACftJ,EAAAzB,OAAA4B,EAAA,EAAA5B,CAAA2B,KAAA3B,OAAA6B,EAAA,EAAA7B,CAAA+K,GAAAjJ,KAAAH,KAAMH,KAWVwJ,cAAgB,SAACpB,GACbnI,EAAKQ,SAAS,CACZgJ,cAAgBrB,EAAMzH,OAAOE,SAdhBZ,EAkBnByJ,eAAiB,SAACtB,GACdnI,EAAKQ,SAAS,CACZkJ,eAAiBvB,EAAMzH,OAAOE,SAlBhCZ,EAAKa,MAAQ,CACT8I,YAAY,EACZH,cAAe,WACfE,eAAgB,gBAGpB1J,EAAKuJ,cAAgBvJ,EAAKuJ,cAAcpI,KAAnB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACrBA,EAAKyJ,eAAiBzJ,EAAKyJ,eAAetI,KAApB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KATPA,wEAwBV,IAAA0C,EAAAxC,KAEC0J,EACF5G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQW,KAAK,UAAUU,QAAS,WAAK7B,EAAKlC,SAAS,CAACmJ,YAAa,EAAOE,cAAc,MAAtF,yBACA7G,EAAAC,EAAAC,cAAA,UAAQW,KAAK,UAAUU,QAAS,WAAK7B,EAAKlC,SAAS,CAACmJ,YAAa,EAAME,cAAc,MAArF,2BAIN,OAAG3J,KAAKW,MAAM8I,WAER3G,EAAAC,EAAAC,cAAA,WACG0G,EACD5G,EAAAC,EAAAC,cAAC4G,EAAD,CAAgBzL,SAAU6B,KAAKuJ,iBAC/BzG,EAAAC,EAAAC,cAAC6G,EAAD,CAAa1C,QAASnH,KAAKH,MAAM9B,SAAUI,SAAU6B,KAAKW,MAAM6I,kBAMlE1G,EAAAC,EAAAC,cAAA,WACG0G,EACD5G,EAAAC,EAAAC,cAAC8G,EAAD,CAAe1B,QAAWpI,KAAKqJ,gBAC/BvG,EAAAC,EAAAC,cAAC+G,EAAD,CAAiB5C,QAASnH,KAAKH,MAAM9B,SAAUqK,QAAWpI,KAAKW,MAAM2I,wBAhDvD/E,IAAMC,YCDrBwF,EAhBG,CACdC,mBAAsB,YACtBC,4BAA+B,+CAC/BC,mCAAsC,YACtCC,yBAA4B,yFAC5BC,6BAAgC,iDAChCC,mBAAsB,YACtBC,kBAAqB,sBACrBC,6BAAgC,6BAChCC,MAAS,GACTC,4BAA+B,iFAC/BC,mBAAsB,YACtBC,+BAAkC,sCCXzBC,GAAgB,wTCkC7BC,IAAQC,UAAUf,GAClBc,IAAQC,UAAUC,OAIZC,eACJ,SAAAA,EAAapL,GAAO,IAAAC,EAAA,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAA2B,KAAAiL,IAClBnL,EAAAzB,OAAA4B,EAAA,EAAA5B,CAAA2B,KAAA3B,OAAA6B,EAAA,EAAA7B,CAAA4M,GAAA9K,KAAAH,KAAMH,KAsBRwJ,cAAe,SAACpB,GACdnI,EAAKQ,SAAS,CACZgJ,cAAgBrB,EAAMzH,OAAOE,SAzBbZ,EA6BpByJ,eAAiB,SAACtB,GAChBnI,EAAKQ,SAAS,CACZkJ,eAAiBvB,EAAMzH,OAAOE,SA/BdZ,EAmCpBoL,cAAgB,WACd/I,OAAKgJ,UACJC,KAAK,SAAAxG,GAAI,OAAIlD,QAAQC,IAAIiD,KACzByG,MAAM,SAAAC,GAAG,OAAI5J,QAAQC,IAAI2J,MAtCRxL,EAyCpByL,eAAiB,WACfzL,EAAKQ,SAAS,CACZkL,YAAY,EAEZC,cAAc,EACdC,aAAa,EACbjC,YAAY,EACZH,cAAe,WACfE,eAAgB,eAChBmC,gBAAgB,EAChB/E,aAAc,MAnDE9G,EAuDpB8L,cAAgB,WACd9L,EAAKQ,SAAS,CACZoL,aAAa,EACbD,cAAc,EACdE,gBAAgB,EAChBE,gBAAgB,KA5DA/L,EAgEpBgM,eAAiB,WACfhM,EAAKQ,SAAS,CACZoL,aAAa,EACbD,cAAc,EACdE,gBAAgB,EAChBE,gBAAgB,KArEA/L,EAyEpBiM,iBAAmB,WACjBjM,EAAKQ,SAAS,CACZoL,aAAa,EACbD,cAAc,EACdE,gBAAgB,EAChBE,gBAAgB,KA9EA/L,EAkFpBkM,wBAA0B,SAAC3L,GACzBP,EAAKQ,SAAS,CACZsG,aAAcvG,EAAEG,OAAOE,SApFPZ,EAwFpBmM,mBAAqB,WACnBnM,EAAKQ,SAAS,CACZoL,aAAa,EACbD,cAAc,EACdE,gBAAgB,EAChBE,gBAAgB,KA7FA/L,EAkGpBoM,cAAgB,SAACC,EAAWC,GAC1B,IAAIC,EAAehO,OAAOiO,OAAO,GAAIH,GAGnC,OAFFE,EAAa5H,cAAc8H,MACzBJ,EAAU1H,cAAc8H,MAAMC,OAAO,CAACJ,EAAQvB,mBACvCwB,GApGTvM,EAAKa,MAAQ,CACX8L,mBAAoB,GAEpBhB,cAAc,EACdC,aAAa,EACbC,gBAAgB,EAChBE,gBAAgB,EAChBpC,YAAY,EACZH,cAAe,WACfE,eAAgB,gBAGlB1J,EAAKuJ,cAAgBvJ,EAAKuJ,cAAcpI,KAAnB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACrBA,EAAKyJ,eAAiBzJ,EAAKyJ,eAAetI,KAApB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACtBA,EAAK8L,cAAgB9L,EAAK8L,cAAc3K,KAAnB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACrBA,EAAKgM,eAAiBhM,EAAKgM,eAAe7K,KAApB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACtBA,EAAKiM,iBAAmBjM,EAAKiM,iBAAiB9K,KAAtB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KACxBA,EAAKkM,wBAA0BlM,EAAKkM,wBAAwB/K,KAA7B5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KAC/BA,EAAKmM,mBAAqBnM,EAAKmM,mBAAmBhL,KAAxB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAyB,KApBRA,mNA0GOqC,OAAKC,kCAA1BC,SACAC,EAAKD,EAAaE,SACtBvC,KAAKM,SAAS,CAEZmM,mBAAoBnK,uIAIf,IAAAE,EAAAxC,KAED4G,EAAe5G,KAAKW,MAAMiG,aAE1B8F,EACJ5J,EAAAC,EAAAC,cAAC2J,EAAA5J,EAAD,CAAQK,UAAU,oCAElBN,EAAAC,EAAAC,cAAC2J,EAAA5J,EAAO6J,MAAR,KACE9J,EAAAC,EAAAC,cAAA,KAAG6J,KAAK,IAAIxI,QAASrE,KAAKuL,gBAC1BzI,EAAAC,EAAAC,cAAA,OACA8J,IAAMC,KACNC,MAAM,MACNC,OAAO,KACP7J,UAAU,2BACV8J,IAAI,wBAMJpK,EAAAC,EAAAC,cAACmK,EAAApK,EAAD,CAAMqK,QAAM,GACVtK,EAAAC,EAAAC,cAACqK,EAAAtK,EAAD,CAAarC,MAAQkG,EAAejD,KAAK,OAC5BI,YAAY,sBAAsBX,UAAU,QAC5CQ,SAAW5D,KAAKgM,0BAC7BlJ,EAAAC,EAAAC,cAACsK,EAAAvK,EAAD,CAAQqB,QAAQ,gBAAgBC,QAAUrE,KAAKiM,oBAAqBnJ,EAAAC,EAAAC,cAAA,YAAO,kBAG7EF,EAAAC,EAAAC,cAACuK,EAAAxK,EAAD,KACED,EAAAC,EAAAC,cAACsK,EAAAvK,EAAD,CAAQqB,QAAQ,UAAUC,QAASrE,KAAK4L,eAAxC,OACA9I,EAAAC,EAAAC,cAACsK,EAAAvK,EAAD,CAAQqB,QAAQ,UAAUC,QAASrE,KAAK8L,gBAAxC,SAGFhJ,EAAAC,EAAAC,cAACwK,EAAAzK,EAAD,KACED,EAAAC,EAAAC,cAACsK,EAAAvK,EAAD,CAAQzB,GAAG,SAAS+C,QAASrE,KAAK+L,kBACjC/L,KAAKW,MAAM8L,mBADZ,WAGA3J,EAAAC,EAAAC,cAACsK,EAAAvK,EAAD,CAAQzB,GAAG,SAAS+C,QAASrE,KAAKkL,eAAlC,cAOEuC,EAEJ3K,EAAAC,EAAAC,cAAC0K,GAAA,QAAD,CAASC,MAAO7L,2BAAiB8L,GACxBC,aAAc/L,2BAAiBgM,IAC/BC,kBAAmB/N,KAAKkM,eAChC,SAAA8B,GAAiD,IAAtCvJ,EAAsCuJ,EAA9CpJ,KAAQH,cAAiBwJ,EAAqBD,EAArBC,QACzB,OAD8CD,EAAZE,MACfpL,EAAAC,EAAAC,cAAA,mBACfiL,IAAYxJ,EAAuB3B,EAAAC,EAAAC,cAAA,wBAErCF,EAAAC,EAAAC,cAACmL,EAAD,CACEpQ,SAAU0G,EAAc8H,UAM9B6B,EACFtL,EAAAC,EAAAC,cAAC0K,GAAA,QAAD,CAASC,MAAO7L,2BAAiB8L,GACxBC,aAAc/L,2BAAiBgM,IAC/BC,kBAAmB/N,KAAKkM,eAChC,SAAAmC,GAAiD,IAAtC5J,EAAsC4J,EAA9CzJ,KAAQH,cAAiBwJ,EAAqBI,EAArBJ,QACzB,OAD8CI,EAAZH,MACfpL,EAAAC,EAAAC,cAAA,mBACfiL,IAAYxJ,EAAuB3B,EAAAC,EAAAC,cAAA,wBAErCF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgB,EAAD,CAAKjG,SAAU0G,EAAgBA,EAAc8H,MAAQ,QAO3D+B,EACJxL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuL,EAAD,MACAzL,EAAAC,EAAAC,cAAC0K,GAAA,QAAD,CAASC,MAAO7L,2BAAiB8L,GACxBC,aAAc/L,2BAAiBgM,IAC/BC,kBAAmB/N,KAAKkM,eAChC,SAAAsC,GAAiD,IAAtC/J,EAAsC+J,EAA9C5J,KAAQH,cAAiBwJ,EAAqBO,EAArBP,QACzB,OAD8CO,EAAZN,MACfpL,EAAAC,EAAAC,cAAA,mBACfiL,IAAYxJ,EAAuB3B,EAAAC,EAAAC,cAAA,wBAErCF,EAAAC,EAAAC,cAACyL,EAAD,CACEtH,QAAS1C,EAAc8H,MACvB3L,KAAM4B,EAAK7B,MAAM8L,wBAQrBiC,EACJ5L,EAAAC,EAAAC,cAAC0K,GAAA,QAAD,CAASC,MAAO7L,2BAAiB8L,GACxBC,aAAc/L,2BAAiBgM,IAC/BC,kBAAmB/N,KAAKkM,eAChC,SAAAyC,GAAiD,IAAtClK,EAAsCkK,EAA9C/J,KAAQH,cAAiBwJ,EAAqBU,EAArBV,QAC3B,OADgDU,EAAZT,MACjBpL,EAAAC,EAAAC,cAAA,mBACfiL,IAAYxJ,EAAuB3B,EAAAC,EAAAC,cAAA,wBAErCF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4L,EAAD,CAAQ7Q,SAAU0G,EAAgBA,EAAc8H,MAAQ,GAChD3F,aAAcpE,EAAK7B,MAAMiG,kBAOzCiI,EAAY,GAYhB,OATEA,EADE7O,KAAKW,MAAM+K,YACD0C,EACHpO,KAAKW,MAAM8K,aACRgC,EACHzN,KAAKW,MAAMkL,eACR6C,EAEAJ,EAIZxL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,OAAK1B,GAAG,QAAR,IAAkBoL,EAAlB,KACA5J,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YAAf,IAA6ByL,EAA7B,aAlPUrK,aAwPHsK,gCAAkB7D,ICtRb8D,QACW,cAA7BjK,OAAOkK,SAASC,UAEe,UAA7BnK,OAAOkK,SAASC,UAEhBnK,OAAOkK,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtM,EAAAC,EAAAC,cAACqM,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtE,KAAK,SAAAuE,GACjCA,EAAaC,oDEnInB,IAOMC,EAAW,SAACC,GACd,OAAIA,EAAS,GAJF,UAKPA,EAAS,GANG,UAOZA,EAAS,GARE,UASXA,EAAS,GAVM,UADD,WAoEtBjS,EAAQqH,gBAAkB,SAACnH,EAAUE,EAAKC,EAAOC,GAE7C,IAAMsE,EAAgB,IAAIpE,OAqB1B,OApBAN,EAASO,QAAQ,SAAAC,GACb,IAAIC,EAAQ,IAAIC,KAAKF,EAAMG,YAAYC,SAEvC,GADAH,EAAQ,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAAYA,IAC3E,OAAPP,GAAgBO,GAASP,KAChB,OAATC,GAAmBK,EAAMK,YAAcV,KAC3B,OAAZC,GAAqBI,EAAMM,gBAAkBV,GAAW,CAErD,IAAI4R,EAAWxR,EAAMiB,aACrB,GAAMiD,EAAcxD,eAAe8Q,GAK9B,CACD,IAAI7Q,EAASuD,EAAcsN,GAAU5Q,UAAYZ,EAAMa,aACvDqD,EAAcsN,GAAU1Q,YAAcoD,EAAcsN,GAAU1Q,YAAcoD,EAAcsN,GAAU5Q,UAAYD,EAAQX,EAAMe,SAAWJ,EACzIuD,EAAcsN,GAAU5Q,UAAYD,OAPpCuD,EAAcsN,GAAY,CAACvQ,aAAcuQ,EACjB1Q,YAAcd,EAAMe,SAAWf,EAAMa,aACrCD,UAAWZ,EAAMa,iBASlDqD,GAKX5E,EAAQoH,iBAAmB,SAAC+K,GACxB,IAAIpL,EAAO,GACPqL,EAAU,GACd,IAAK,IAAI1R,KAASyR,GAChBC,EAAU,IACFxP,KAAOuP,EAAazR,GAAOiB,aACnCyQ,EAAQC,OAAS,GACjBD,EAAQC,OAAOvN,KAAK,CAACC,MAAO,eAAgBuN,IAAK5O,KAAKC,MAAMwO,EAAazR,GAAOc,eAEhF4Q,EAAQ3J,MAAQuJ,EAASI,EAAQC,OAAO,GAAGC,KAC3CvL,EAAKjC,KAAKsN,GAEZ,OAAOrL,GAGX/G,EAAQgS,SAAWA,oBCtFnBhS,EAAQyK,sBAAwB,SAACd,GAE7B,IAAMjI,EAAW,GAejB,OAdAiI,EAASlJ,QAAQ,SAAA8I,GACb,IAAIK,EAAeL,EAAKtI,cACxB,GAAMS,EAASN,eAAewI,GAMzB,CACD,IAAIvI,EAASK,EAASkI,GAActI,UAAYiI,EAAKhI,aACrDG,EAASkI,GAAcpI,YAAcE,EAASkI,GAAcpI,YAAcE,EAASkI,GAActI,UAAYD,EAAQkI,EAAK9H,SAAWJ,EACrIK,EAASkI,GAActI,UAAYD,OARnCK,EAASkI,GAAgB,CAAC3I,cAAe2I,EACjB5G,wBAAyBuG,EAAKvG,wBAA0B,KAAOuG,EAAKtG,cAAgB,KAAOsG,EAAKrG,eAAiB,IAAMqG,EAAKpG,aAC5H3B,YAAc+H,EAAK9H,SAAW8H,EAAKhI,aACnCD,UAAWiI,EAAKhI,gBAQzCG,GA4BX1B,EAAQ6K,yBAA2B,SAAClB,GAChC,IAAM4I,EAAoB,GAsD1B,OArDA5I,EAASlJ,QAAQ,SAAA8I,GACb,IAAIK,EAAeL,EAAKtI,cACpBb,EA7BG,SAAC6J,GACZ,IAAI7J,EAAM6J,EAAKnJ,SACf,OAAW,IAARV,EACQ,SAEM,IAARA,EACE,SAEM,IAARA,EACE,UAEM,IAARA,EACE,YAEM,IAARA,EACE,WAEM,IAARA,EACE,SAEM,IAARA,EACE,cADN,EASSU,CAAO,IAAIF,KAAK2I,EAAK1I,aAC/B,GAAM0R,EAAkBnR,eAAewI,GAwClC,CAKD,IAAIvI,EAASkR,EAAkB3I,GAAcxJ,GAAKkB,UAAYiI,EAAKhI,aACnEgR,EAAkB3I,GAAcxJ,GAAKoB,YAAc+Q,EAAkB3I,GAAcxJ,GAAKoB,YAAc+Q,EAAkB3I,GAAcxJ,GAAKkB,UAAYD,EAAQkI,EAAK9H,SAAWJ,EAC/KkR,EAAkB3I,GAAcxJ,GAAKkB,UAAYD,MA/CC,CAClD,IAAImR,EAAM,CACEhR,YAAc+H,EAAK9H,SAAW8H,EAAKhI,aACnCD,UAAWiI,EAAKhI,cAG5BgR,EAAkB3I,GAAgB,CAC9BmB,SAAU,CACNvJ,YAAa,EACbF,UAAW,GAEf0J,OAAQ,CACJxJ,YAAa,EACbF,UAAW,GAEf2J,OAAQ,CACJzJ,YAAa,EACbF,UAAW,GAEf4J,QAAS,CACL1J,YAAa,EACbF,UAAW,GAEf6J,UAAW,CACP3J,YAAa,EACbF,UAAW,GAEf8J,SAAU,CACN5J,YAAa,EACbF,UAAW,GAEf+J,OAAQ,CACJ7J,YAAa,EACbF,UAAW,IAInBiR,EAAkB3I,GAAcxJ,GAAOoS,EACvCD,EAAkB3I,GAAc6I,QAAUlJ,EAAKvG,wBAA0B,KAAOuG,EAAKtG,cAAgB,KAAOsG,EAAKrG,eAAiB,IAAMqG,EAAKpG,gBAY9IoP,GAGXvS,EAAQ0S,sBAAwB,SAAC/I,GAC7B,IAAMgJ,EAAoB,GA8C1B,OA7CAhJ,EAASlJ,QAAQ,SAAA8I,GACb,IAAIK,EAAeL,EAAKtI,cACpB2R,EAAMrJ,EAAKvI,eACf,GAAM2R,EAAkBvR,eAAewI,GAgClC,CAKD,IAAIvI,EAASsR,EAAkB/I,GAAcgJ,GAAKtR,UAAYiI,EAAKhI,aACnEoR,EAAkB/I,GAAcgJ,GAAKpR,YAAcmR,EAAkB/I,GAAcgJ,GAAKpR,YAAcmR,EAAkB/I,GAAcgJ,GAAKtR,UAAYD,EAAQkI,EAAK9H,SAAWJ,EAC/KsR,EAAkB/I,GAAcgJ,GAAKtR,UAAYD,MAvCC,CAClD,IAAImR,EAAM,CACEhR,YAAc+H,EAAK9H,SAAW8H,EAAKhI,aACnCD,UAAWiI,EAAKhI,cAG5BoR,EAAkB/I,GAAgB,CAC9BiJ,UAAW,CACPrR,YAAa,EACbF,UAAW,GAEfwR,OAAQ,CACJtR,YAAa,EACbF,UAAW,GAEfyR,QAAS,CACLvR,YAAa,EACbF,UAAW,GAEf0R,OAAQ,CACJxR,YAAa,EACbF,UAAW,GAEf2R,MAAO,CACHzR,YAAa,EACbF,UAAW,IAInBqR,EAAkB/I,GAAcgJ,GAAOJ,EACvCG,EAAkB/I,GAAc6I,QAAUlJ,EAAKvG,wBAA0B,KAAOuG,EAAKtG,cAAgB,KAAOsG,EAAKrG,eAAiB,IAAMqG,EAAKpG,gBAY9IwP,GAGX3S,EAAQkT,qBAAuB,SAACvJ,GAC5B,IAAMwJ,EAAc,GACdC,EAAmB,GAmBzB,OAlBAzJ,EAASlJ,QAAQ,SAAA8I,GACb,IAAI8J,EAAM9J,EAAKpG,aACf,GAAMgQ,EAAY/R,eAAeiS,GAQ5B,CACD,IAAIhS,EAAS8R,EAAYE,GAAK/R,UAAYiI,EAAKhI,aAC/C6R,EAAiBC,GAAKC,IAAI/J,EAAKtI,eAC/BkS,EAAYE,GAAKE,eAAiBH,EAAiBC,GAAKG,KACxDL,EAAYE,GAAK7R,YAAc2R,EAAYE,GAAK7R,YAAc2R,EAAYE,GAAK/R,UAAYD,EAAQkI,EAAK9H,SAAWJ,EACnH8R,EAAYE,GAAK/R,UAAYD,OAZ7B+R,EAAiBC,GAAO,IAAII,IAC5BL,EAAiBC,GAAKC,IAAI/J,EAAKtI,eAC/BkS,EAAYE,GAAO,CACfE,eAAgB,EAChB/R,YAAc+H,EAAK9H,SAAW8H,EAAKhI,aACnCD,UAAWiI,EAAKhI,gBAUrB4R,GAIXnT,EAAQ0T,8BAAgC,SAAC/J","file":"static/js/main.bb8c0d04.chunk.js","sourcesContent":["exports.searchParse = (tip_info, business_name_query, day, shift, position) => {\n    //    console.log(tip_info);\n        const results = new Object();\n        tip_info.forEach(entry => {\n            let e_day = new Date(entry.shift_date).getDay();\n            e_day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][e_day];\n            if ((day == 'All' || e_day == day) && \n                (shift == 'All' ||  entry.shift_time == shift) && \n                (position == 'All' || entry.shift_position == position)) {\n                    if (entry.business_name.toLowerCase().includes(business_name_query.toLowerCase())) {\n                        let business_name = entry.business_name;\n                        if (! results.hasOwnProperty(business_name)) {\n                            results[business_name] = {business: business_name,\n                                                    neighborhood: entry.neighborhood,\n                                                    tipsPerHour: (entry.takehome / entry.shift_length),\n                                                    totalHour: entry.shift_length};\n                        }\n                        else {\n                            let hours = (results[business_name].totalHour + entry.shift_length);\n                            results[business_name].tipsPerHour = results[business_name].tipsPerHour * results[business_name].totalHour / hours + entry.takehome / hours;\n                            results[business_name].totalHour = hours;\n                        }\n                    }\n            }\n        });\n        return results;\n    }\n    ","module.exports = __webpack_public_path__ + \"static/media/logo.8e0f60ef.png\";","/**\n * TipInfoForm is the form which users can enter their tipped data.\n * This component is used in App.js to help view the users tips.\n */\nimport React from 'react';\nimport {Col, Row, Container} from 'react-bootstrap';\nimport {Form, Button} from 'react-bootstrap';\n\nimport { API, graphqlOperation, Auth } from \"aws-amplify\";\nimport * as mutations from '../../graphql/mutations';\n\nclass TipInfoForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: '',\n            shift_length: '',\n            shift_time: 'AM',\n            shift_date: '',\n            shift_position: 'Bartender',\n            takehome: '',\n            business_name: '',\n            business_street_address: '',\n            business_city: '',\n            business_state: '', \n            business_zip: '',\n            neighborhood: '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        let t_e = {\n            id: (Math.floor(Math.random() * 100000)),\n            user: this.state.user,\n            shift_length: this.state.shift_length,\n            shift_time: this.state.shift_time,\n            shift_date: this.state.shift_date,\n            shift_position: this.state.shift_position,\n            takehome: this.state.takehome,\n            business_name: this.state.business_name,\n            business_street_address: this.state.business_street_address,\n            business_city: this.state.business_city,\n            business_state: this.state.business_state,\n            business_zip: this.state.business_zip,\n            neighborhood: this.state.neighborhood,\n        }\n        console.log(t_e);\n        try {\n            await API.graphql(graphqlOperation(mutations.createTipEntry, {input: t_e}));\n            console.log(t_e);\n            alert(\"Success!\");\n            this.setState({\n                user: '',\n                shift_length: '',\n                shift_time: 'AM',\n                shift_date: '',\n                shift_position: 'Bartender',\n                takehome: '',\n                business_name: '',\n                business_street_address: '',\n                business_city: '', \n                business_state: '',\n                business_zip: '',\n                neighborhood: ''\n            })\n        } catch (err) {\n            console.log('error creating tipentry: ', err);\n            alert(\"tipentry failed\");\n        }\n    }\n\n    async componentDidMount() {\n        let current_user = await Auth.currentAuthenticatedUser();\n        let un = current_user.username;\n        this.setState({\n          user: un\n        })\n    }\n\n    render () {\n\n        const neighborhoods = [ 'Battery Park City', 'Central Harlem', 'Central Park',\n                                'Chelsea', 'Chinatown', 'City Hall Area', 'East Village',\n                                'Ellis Island', 'Financial District', 'Flatiron District',\n                                'Governors Island', 'Gramercy', 'Greenwich Village', 'Hamilton Heights',\n                                \"Hell's Kitchen\", 'Inwood', 'Kips Bay', 'Liberty Island', 'Little Italy',\n                                'Lower East Side', 'Marble Hill', 'Midtown East', 'Midtown West', 'Morningside Heights',\n                                'Murray Hill', 'NoHo', 'Nolita', \"Randall's Island\", 'Roosevelt Island', \n                                'SoHo', 'Spanish Harlem', 'Stuyvesant Town', 'Tribeca', 'Two Bridges', 'Upper East Side',\n                                'Upper West Side', 'Washington Heights', 'West Village'\n                               ];\n        \n        let hoodlist = [];\n\n        neighborhoods.forEach(function(neighborhood) {\n            hoodlist.push({ label: neighborhood, value: neighborhood })\n        })\n\n        const { shift_length, \n                shift_time,\n                shift_date,\n                shift_position,\n                takehome,\n                business_name,\n                business_street_address,\n                business_city,\n                business_state,\n                business_zip,\n                neighborhood\n            } = this.state;\n\n        return (\n            <div>\n        <Container fluid='true'>\n            <Form className=\"text-left newTips\">\n                <Row>\n                    <Col>\n                        <Form.Group controlID=\"shift_date\">\n                                <Form.Label>Shift Date</Form.Label>\n                                <Form.Control\n                                    type='date'\n                                    name=\"shift_date\"\n                                    value={shift_date}\n                                    onChange={this.handleChange}\n                                />\n                            </Form.Group> \n                    </Col>\n                    <Col>\n                        <Form.Group controlId=\"shift_time\">\n                            <Form.Label>Shift Time</Form.Label>\n                            <Form.Control \n                                    as='select' \n                                    name=\"shift_time\" \n                                    value={shift_time}\n                                    onChange={this.handleChange}>\n                                    <option>AM</option>\n                                    <option>PM</option>\n                                </Form.Control>\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"shift_length\">\n                            <Form.Label>Shift Length (hours)</Form.Label>\n                            <Form.Control\n                                type='number'\n                                name=\"shift_length\"\n                                value={shift_length}\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"shift_position\">\n                                <Form.Label>Position</Form.Label>\n                                <Form.Control \n                                    as='select' \n                                    name=\"shift_position\" \n                                    value={shift_position}\n                                    onChange={this.handleChange}>\n                                    <option>Bartender</option>\n                                    <option>Server</option>\n                                    <option>Barback</option>\n                                    <option>Busser</option>\n                                    <option>Other</option>\n                                </Form.Control>\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Form.Group controlID=\"takehome\">\n                            <Form.Label>Tip Takehome</Form.Label>\n                            <Form.Control\n                                type='number'\n                                name=\"takehome\"\n                                value={takehome}\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"business_name\">\n                            <Form.Label>Business Name</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder=\"i.e. Hot Jim's BBQ\"\n                                name=\"business_name\"\n                                value={business_name}\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"business_street_address\">\n                            <Form.Label>Street Address</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder=\"i.e. 123 E 9th St\"\n                                name=\"business_street_address\"\n                                value={business_street_address}\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"business_city\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder=\"i.e. New York City\"\n                                name=\"business_city\"\n                                value={business_city}\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"business_state\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder=\"i.e. NY\"\n                                name=\"business_state\"\n                                value={business_state}\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"business_zip\">\n                            <Form.Label>Zipcode</Form.Label>\n                            <Form.Control\n                                type='text'\n                                placeholder=\"i.e. 11105\"\n                                name=\"business_zip\"\n                                value={business_zip}\n                                onChange={this.handleChange}\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        <Form.Group controlID=\"neighborhood\">\n                                <Form.Label>Neighborhood</Form.Label>\n                                <Form.Control \n                                    as='select' \n                                    name=\"neighborhood\" \n                                    value={neighborhood}\n                                    onChange={this.handleChange}>\n                                    { neighborhoods.map((neighborhood, index) => {\n                                        return (\n                                            <option key={index} value={neighborhood}>{neighborhood}</option>\n                                        )\n                                    })}\n                                </Form.Control>\n                                <Button \n                                variant=\"primary\" \n                                type=\"submit\" \n                                onClick={(ev) => this.handleSubmit(ev)}>Add Tips\n                                </Button>\n                        </Form.Group>\n                    </Col>\n                </Row>\n            </Form>\n        </Container>\n        </div>\n        );\n    }\n}\n\nexport default TipInfoForm;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createTipEntry = `mutation CreateTipEntry($input: CreateTipEntryInput!) {\n  createTipEntry(input: $input) {\n    id\n    user\n    shift_length\n    shift_time\n    shift_date\n    shift_position\n    takehome\n    business_name\n    business_street_address\n    business_city\n    business_state\n    business_zip\n    neighborhood\n  }\n}\n`;\nexport const updateTipEntry = `mutation UpdateTipEntry($input: UpdateTipEntryInput!) {\n  updateTipEntry(input: $input) {\n    id\n    user\n    shift_length\n    shift_time\n    shift_date\n    shift_position\n    takehome\n    business_name\n    business_street_address\n    business_city\n    business_state\n    business_zip\n    neighborhood\n  }\n}\n`;\nexport const deleteTipEntry = `mutation DeleteTipEntry($input: DeleteTipEntryInput!) {\n  deleteTipEntry(input: $input) {\n    id\n    user\n    shift_length\n    shift_time\n    shift_date\n    shift_position\n    takehome\n    business_name\n    business_street_address\n    business_city\n    business_state\n    business_zip\n    neighborhood\n  }\n}\n`;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getTipEntry = `query GetTipEntry($id: ID!) {\n  getTipEntry(id: $id) {\n    id\n    user\n    shift_length\n    shift_time\n    shift_date\n    shift_position\n    takehome\n    business_name\n    business_street_address\n    business_city\n    business_state\n    business_zip\n    neighborhood\n  }\n}\n`;\nexport const listTipEntrys = `query ListTipEntrys(\n  $filter: ModelTipEntryFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listTipEntrys(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      user\n      shift_length\n      shift_time\n      shift_date\n      shift_position\n      takehome\n      business_name\n      business_street_address\n      business_city\n      business_state\n      business_zip\n      neighborhood\n    }\n    nextToken\n  }\n}\n`;\n","/** Map component to link our data from the amplify backend \n * to our map feature on the main page. \n */\n\nimport React from 'react';\nimport ReactNYC from 'react-nyc-choropleth';\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as queries from '../../graphql/queries';\nimport { getColor, averageTipsByNeighborhood, averageTipsClean, aTBNDayParse, aTBNMasterParse } from './mapFunctions';\nimport { Form, Container, Col, Row, Button, Card } from 'react-bootstrap'\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      day: 'All',\n      shift: 'All',\n      position: 'All',\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value })\n    console.log(this.state.day);\n  }\n\n  handleReset = () => {\n    this.setState(\n      { \n        day: 'All',\n        shift: 'All',\n        position: 'All'\n      }\n    )\n  }\n\n  render() {\n\n    const window_height = window.innerHeight;\n    const window_width = window.innerWidth;\n\n    const mapboxAccessToken = \"pk.eyJ1IjoicG9vbGVkaG91c2UiLCJhIjoiY2p1aGg2N2o5MHozZTRkcDhrZDltMXp6dyJ9.SXu4dBf_bVC8Xlpy7WnYqQ\"; //TODO: delete token before final deployment\n    const mapboxType = \"light\";\n    const map_position = [40.7831, -73.9712];\n    const zoom = 12;\n\n    const neighborhoodStyle = { weight: 1, opacity: 1, color: '#666', dashArray: '3', fillOpacity: 0.7 };\n    const neighborhoodHoverStyle = { weight: 5, color: '#FFF', dashArray: '1', fillOpacity: 0.7 };\n    const excludeNeighborhoods = [\"Liberty Island\", \"Ellis Island\"];\n\n    let data = '';\n    const day = this.state.day;\n    const shift = this.state.shift;\n    const position = this.state.position;\n\n    \n    data = averageTipsClean(\n      aTBNMasterParse(\n        this.props.tip_info, \n        this.state.day, \n        this.state.shift, \n        this.state.position\n      )\n    )\n\n    return (\n        <Container fluid='true'>\n        <Card bg='light'>\n          <Card.Body>\n          <Form className=\"text-left filter\">\n            <Form.Row>\n                <Form.Group controlID=\"day\" as={Col} md='4'>\n                  <Form.Label>Day</Form.Label>\n                    <Form.Control \n                      as='select' \n                      name=\"day\" \n                      value={day}\n                      onChange={this.handleChange}>\n                      <option>All</option>\n                      <option>Monday</option>\n                      <option>Tuesday</option>\n                      <option>Wednesday</option>\n                      <option>Thursday</option>\n                      <option>Friday</option>\n                      <option>Saturday</option>\n                      <option>Sunday</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group conrolID=\"shift\" as={Col} md='4'>\n                  <Form.Label>Shift</Form.Label>\n                    <Form.Control\n                      as='select'\n                      name='shift'\n                      value={shift}\n                      onChange={this.handleChange}>\n                      <option>All</option>\n                      <option>AM</option>\n                      <option>PM</option>\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group controlID=\"position\" as={Col} md='4'>\n                  <Form.Label>Position</Form.Label>\n                    <Form.Control\n                      as='select'\n                      name='position'\n                      value={position}\n                      onChange={this.handleChange}>\n                      <option>All</option>\n                      <option>Bartender</option>\n                      <option>Server</option>\n                      <option>Host</option>\n                      <option>Busser</option>\n                      <option>Other</option>\n                    </Form.Control>\n                </Form.Group>\n              </Form.Row>\n              <Row>\n                <Col md='4'></Col>\n              <Button \n                as={Col} \n                md='4'\n                variant=\"primary\" \n                type=\"reset\" \n                onClick={this.handleReset}>Reset Filter\n              </Button>\n              <Col md='4'></Col>\n              </Row>\n          </Form>\n          </Card.Body>\n          </Card>\n          <Row>\n            <Col md='1'></Col>\n            <Col>\n          <ReactNYC\n            mapboxAccessToken={mapboxAccessToken} // Required\n            //mapHeight=\"600px\" // Required\n            mapHeight={window_height*.75}\n            mapWidth=\"90%\"\n            className=\"container\"\n            mapboxType={mapboxType}\n            mapCenter={map_position}\n            mapZoom={zoom}\n            mapScrollZoom={false}\n            neighborhoodOn={true}\n            tooltip={true}\n            tooltipSticky={false}\n            data={data}\n            neighborhoodStyle={neighborhoodStyle}\n            neighborhoodHoverStyle={neighborhoodHoverStyle}\n            excludeNeighborhoods={excludeNeighborhoods}\n          />\n          </Col>\n          <Col md='1'></Col>\n          </Row>\n        </Container>\n    )\n  }\n}\n\nexport default Map;\n\n//note: following link has been to select 6 different layer of colors\n//       http://colorbrewer2.org/#type=diverging&scheme=RdYlGn&n=6","/**\n * Search component used in App.js to create a search feature\n * in homepage. Mostly this component is used to link front end\n * to our backend.\n */\n\nimport React from 'react';\nimport {Col, Row, Container} from 'react-bootstrap';\nimport {Table, Button, Card, Form} from 'react-bootstrap';\n\nimport { searchParse } from './searchFunctions'\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            day: 'All',\n            shift: 'All',\n            position: 'All',\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleReset = this.handleReset.bind(this);\n    }\n    \n    handleChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n        console.log(this.state.day);\n    }\n    \n      handleReset = () => {\n        this.setState(\n          { \n            day: 'All',\n            shift: 'All',\n            position: 'All'\n          }\n        )\n      }\n\n    render() {\n\n        const { day, shift, position } = this.state;\n\n        const tip_info = this.props.tip_info;\n        const search_query = this.props.search_query;\n        const raw_results = searchParse(tip_info, search_query, \n                                        this.state.day, this.state.shift, \n                                        this.state.position);\n\n        const filter = (\n            <Card bg='light'>\n            <Card.Body>\n            <Form className=\"text-left filter\">\n              <Form.Row>\n                  <Form.Group controlID=\"day\" as={Col} md='4'>\n                    <Form.Label>Day</Form.Label>\n                      <Form.Control \n                        as='select' \n                        name=\"day\" \n                        value={day}\n                        onChange={this.handleChange}>\n                        <option>All</option>\n                        <option>Monday</option>\n                        <option>Tuesday</option>\n                        <option>Wednesday</option>\n                        <option>Thursday</option>\n                        <option>Friday</option>\n                        <option>Saturday</option>\n                        <option>Sunday</option>\n                      </Form.Control>\n                  </Form.Group>\n                  <Form.Group conrolID=\"shift\" as={Col} md='4'>\n                    <Form.Label>Shift</Form.Label>\n                      <Form.Control\n                        as='select'\n                        name='shift'\n                        value={shift}\n                        onChange={this.handleChange}>\n                        <option>All</option>\n                        <option>AM</option>\n                        <option>PM</option>\n                      </Form.Control>\n                  </Form.Group>\n                  <Form.Group controlID=\"position\" as={Col} md='4'>\n                    <Form.Label>Position</Form.Label>\n                      <Form.Control\n                        as='select'\n                        name='position'\n                        value={position}\n                        onChange={this.handleChange}>\n                        <option>All</option>\n                        <option>Bartender</option>\n                        <option>Server</option>\n                        <option>Host</option>\n                        <option>Busser</option>\n                        <option>Other</option>\n                      </Form.Control>\n                  </Form.Group>\n                </Form.Row>\n                <Row>\n                  <Col md='4'></Col>\n                <Button \n                  as={Col} \n                  md='4'\n                  variant=\"primary\" \n                  type=\"reset\" \n                  onClick={this.handleReset}>Reset Filter\n                </Button>\n                <Col md='4'></Col>\n                </Row>\n            </Form>\n            </Card.Body>\n            </Card>\n        );\n        \n        if (Object.keys(raw_results).length == 0) {\n            return (\n                <Container fluid>\n                <div>\n                { filter } \n                <p>No results found.</p> \n                </div>\n                </Container>\n            )\n        } else {\n            return (\n                <Container fluid>\n                <div>\n                { filter } \n                <Table>\n                    <thead>\n                        <tr>\n                            <th>Business</th>\n                            <th>Neighborhood</th>\n                            <th>Hourly Avg $</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { Object.keys(raw_results).map(key => {\n                            return (\n                                <tr>\n                                    <td>{ raw_results[key].business }</td>\n                                    <td>{ raw_results[key].neighborhood }</td>\n                                    <td>{ Math.floor(raw_results[key].tipsPerHour) }</td>\n                                </tr>\n                            )\n                        }) }\n                    </tbody>\n                </Table>\n                </div>\n                </Container>\n            );\n        }\n    }\n}\n\nexport default Search;","import React from 'react';\r\n\r\n// component to display all the tips data by the userInfo\r\n\r\nconst ViewUserTips = (props) => {\r\n    let userTips =  props.tipInfo.filter(tips => tips.user === props.user);\r\n\r\n    // let filterdUserTips = props.position !== \"All Position\"? userTips.filter(tips => tips.shift_position === props.position) : tipInfo;\r\n    \r\n    let tipInfo = userTips.map( (tips, index) => {\r\n        return (\r\n            <div className=\"tipInfo\">\r\n                <h2 className=\"busTitle\">{tips.business_name}</h2>\r\n                <div className=\"addr\">{tips.business_address}</div>\r\n                <div>Position: {tips.shift_position}</div>\r\n                <div>Tips : ${tips.takehome}</div>\r\n                <div>Hours Worked : {tips.shift_length}</div>\r\n                <div>Work Shift : {tips.shift_time}</div>\r\n                <div>Date : {tips.shift_date}</div>\r\n            </div>\r\n        );        \r\n    });\r\n\r\n    return tipInfo;\r\n}\r\n\r\nexport default ViewUserTips;","/**\r\n * This stateless component  is used in parallel with the ProcessTips component\r\n * within the ViewTipInfoList. It is used to help display the users tips in the \r\n * profile page.\r\n */\r\nimport React from 'react';\r\n\r\n\r\n// TODO: function sort \r\n\r\nexport const sortTips = (tipInfo) => {\r\n\r\n}\r\n\r\nexport const createBusinessTable =  (tipsInfo) => {\r\n    const business = {};\r\n    tipsInfo.forEach(tips => {\r\n        let businessName = tips.business_name;\r\n        if (! business.hasOwnProperty(businessName)) {\r\n            business[businessName] = [{\r\n                // business_name: businessName,\r\n                business_street_address: tips.business_street_address + \", \" + tips.business_city + \", \" + tips.business_state + \" \" + tips.business_zip, \r\n                Position: tips.shift_position,\r\n                Tips : tips.takehome,\r\n                Hour : tips.shift_length,\r\n                Shift : tips.shift_time,\r\n                date : tips.shift_date}];\r\n        }\r\n        else {\r\n            business[businessName].push({\r\n                // business_name: businessName,\r\n                business_street_address: tips.business_street_address + \", \" + tips.business_city + \", \" + tips.business_state + \" \" + tips.business_zip, \r\n                Position: tips.shift_position,\r\n                Tips : tips.takehome,\r\n                Hour : tips.shift_length,\r\n                Shift : tips.shift_time,\r\n                date : tips.shift_date\r\n            });\r\n        }\r\n    });\r\n    return business;\r\n}\r\n// output style\r\n// |Business Name |\r\n// |address |\r\n// |position name : Tips|\r\n// |position name : Tips|\r\n// .....\r\nconst ViewTipInfo = (props) => {\r\n\r\n    // must fix filtered output\r\n\r\n    let filterdTipInfo = props.position !== \"All Position\"? props.tipInfo.filter(tips => tips.shift_position === props.position) : props.tipInfo;\r\n    // TODO : sort all tips into object business name as key\r\n    // \r\n    console.log(createBusinessTable( filterdTipInfo));\r\n    let tipInfo = filterdTipInfo.map( (tips, index) => {\r\n        return (\r\n            <div className=\"tipInfo\">\r\n                <h2 className=\"busTitle\">{tips.business_name}</h2>\r\n                <div className=\"addr\">{tips.business_street_address + \", \" + tips.business_city + \", \" + tips.business_state + \" \" + tips.business_zip}</div>\r\n                <div>Position: {tips.shift_position}</div>\r\n                <div>Tips : ${tips.takehome}</div>\r\n                <div>Hours Worked : {tips.shift_length}</div>\r\n                <div>Work Shift : {tips.shift_time}</div>\r\n                <div>Date : {tips.shift_date}</div>\r\n            </div>\r\n        );        \r\n    });\r\n\r\n    return tipInfo;\r\n}\r\n\r\nexport default ViewTipInfo;","/**\r\n * PositionOption is a stateless component used in ViewTipInfoList.\r\n * When the user clicks \"View Detailed Tip Data\", this component will\r\n * become available so that the user can select which position they\r\n * would like to search for.\r\n */\r\nimport React from 'react';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nconst PositionOption = (props) => {\r\n    let positionOption = (\r\n        <Form>\r\n            <Form.Group>\r\n              <Form.Label>View Tips By Job</Form.Label>\r\n              <Form.Control\r\n              as='select'\r\n              onChange = {(event)=>{props.position(event)}}>\r\n                <option>All Position</option>\r\n                <option>Bartender</option>\r\n                <option>Server</option>\r\n                <option>Barback</option>\r\n                <option>Busser</option>\r\n                <option>Other</option>\r\n            </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n      );\r\n      return positionOption;\r\n}\r\n\r\nexport default PositionOption;\r\n\r\n\r\n","/**\r\n * \r\n */\r\n// import all functions\r\n// display based on the functions\r\nimport React from 'react';\r\nimport {averageTipsByBusiness, averageTipsByBusinessDay} from './ProcessTips';\r\n\r\nconst ViewTipsAverage = (props) => {\r\n    // user selects the view option\r\n    // function to process based on data called from above\r\n\r\n    // form to select filter type for average tips/hour\r\n\r\n    let tipsInfo = props.tipInfo;\r\n    let view = [];\r\n    if (props.process === \"Business\") {\r\n        const processedTips = averageTipsByBusiness(tipsInfo);\r\n        view = Object.keys(processedTips).map(tips => {\r\n            return (\r\n            <div className =\"tipsByBusiness\">\r\n                <div>\r\n                    <h2 className=\"busTitle\">{processedTips[tips].business_name}</h2>\r\n                    <div className=\"addr\">{processedTips[tips].business_street_address}</div>\r\n                </div>\r\n                <div>Tips : ${Number.parseFloat(processedTips[tips].tipsPerHour).toFixed(2)}/Hour</div>\r\n            </div>);\r\n        });\r\n\r\n    }\r\n    \r\n    else if (props.process === \"Daily Average\") {\r\n        const processedTips = averageTipsByBusinessDay(tipsInfo);\r\n        view = Object.keys(processedTips).map(bName => {\r\n           console.log(bName);\r\n           return (\r\n               <div>\r\n                  { console.log(processedTips[bName])}\r\n                   <div className=\"dailyTipsAvg\">\r\n                       <div className=\"busTitle\">{bName}</div>\r\n\r\n                       <div>{Number.parseFloat(processedTips[bName].Saturday.tipsPerHour).toFixed(2)}</div>\r\n                       <div>{Number.parseFloat(processedTips[bName].Sunday.tipsPerHour).toFixed(2)}</div>\r\n                       <div>{Number.parseFloat(processedTips[bName].Monday.tipsPerHour).toFixed(2)}</div>\r\n                       <div>{Number.parseFloat(processedTips[bName].Tuesday.tipsPerHour).toFixed(2)}</div>\r\n                       <div>{Number.parseFloat(processedTips[bName].Wednesday.tipsPerHour).toFixed(2)}</div>\r\n                       <div>{Number.parseFloat(processedTips[bName].Thursday.tipsPerHour).toFixed(2)}</div>\r\n                       <div>{Number.parseFloat(processedTips[bName].Friday.tipsPerHour).toFixed(2)}</div>\r\n                   </div>\r\n               </div>\r\n           );\r\n       });\r\n\r\n       view = (\r\n       <div>\r\n           <div className=\"dayName dailyTipsAvg\">\r\n                <div>Business Name</div>\r\n                <div>Saturday</div>\r\n                <div>Sunday</div>\r\n                <div>Monday</div>\r\n                <div>Tuesday</div>\r\n                <div>Wednesday</div>\r\n                <div>Thursday</div>\r\n                <div>Friday</div>\r\n           </div>\r\n           <div>\r\n               {view}\r\n           </div>\r\n       </div>)\r\n\r\n    }\r\n\r\n    return view;\r\n}\r\n\r\nexport default ViewTipsAverage;","/**\r\n * ProcessOptions component is used to create a dropdown menu for displaying\r\n * Average Tips. This menu allows you to select which  value you'd like to \r\n * display average tip by.\r\n */\r\n\r\nimport React from 'react';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nconst ProcessOption = (props) => {\r\n    let processOption = (\r\n        <Form>\r\n            <Form.Group>\r\n              <Form.Label>View Average Tips By </Form.Label>\r\n              <Form.Control\r\n              as='select'\r\n              onChange = {(event)=>{props.process(event)}}>\r\n                  <option>Business</option>\r\n                  <option>Daily Average</option>\r\n                  <option>Position</option>\r\n               \r\n                  <option>Neighborhood</option>\r\n                  <option>Highest Average Tips</option>\r\n                  <option>Lowest Average Tips</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n      );\r\n\r\n      return processOption;\r\n}\r\n\r\nexport default ProcessOption;\r\n\r\n\r\n","/**\n * ViewTipInfoList is a Component that is used for displaying either\n * your average tip data or a detailed tip data across the whole database.\n * It is currently being used in the My Tips profile page to display tipped\n * data. \n * @summary This component shows either your tips or all tips.\n */\n\nimport React from 'react';\n\n// View Component\nimport ViewTipInfo from '././ViewTipInfo';\nimport PositionOption from './PositionOption';\nimport './ViewTipInfo.css';\nimport ViewTipsAverage from '../ProcessTips/ViewProcessedTips';\nimport ProcessOption from '../ProcessTips/ProcessOption';\nimport '../ProcessTips/ViewProcessedTips.css';\nimport ViewUserTips from '././UserTipInfo';\n\nclass ViewTipInfoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            detailList: false,\n            processFilter: \"Business\",\n            positionFilter: \"All Position\",\n        };\n\n        this.handleProcess = this.handleProcess.bind(this);\n        this.handlePosition = this.handlePosition.bind(this);\n    }\n    \n    handleProcess = (event) => {\n        this.setState({\n          processFilter : event.target.value\n        })\n      }\n\n    handlePosition = (event) => {\n        this.setState({\n          positionFilter : event.target.value\n        })\n    }\n\n    render() {\n\n        const buttons = (\n            <div>\n              <button type=\"primary\" onClick={()=>{this.setState({detailList : false, showUserTips: false})}}>View Average Tip Data</button>\n              <button type=\"primary\" onClick={()=>{this.setState({detailList : true, showUserTips: false})}}>View Detailed Tip Data</button>\n            </div> \n        )\n\n        if(this.state.detailList) {\n            return  ( \n              <div>\n                {buttons}   \n                <PositionOption position={this.handlePosition}/>\n                <ViewTipInfo tipInfo={this.props.tip_info} position={this.state.positionFilter} />\n              </div>\n              );\n          }\n          else {\n            return  (\n              <div>\n                {buttons}   \n                <ProcessOption process = {this.handleProcess}/>\n                <ViewTipsAverage tipInfo={this.props.tip_info} process = {this.state.processFilter} />\n              </div>);\n          }\n    };\n}\n\nexport default ViewTipInfoList;","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_content_delivery_bucket\": \"front-end-20190502100445-hostingbucket-phdev\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"http://front-end-20190502100445-hostingbucket-phdev.s3-website-us-east-1.amazonaws.com\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:c87a8d78-1ce2-42b7-8cd6-ef3e2c15495e\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_dEdKYWuRL\",\n    \"aws_user_pools_web_client_id\": \"1qvola46uieqbouj5qp72dsn65\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://5ucyrblvtjgsjoicvya2z4zp24.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\"\n};\n\n\nexport default awsmobile;\n","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateTipEntry = `subscription OnCreateTipEntry {\n  onCreateTipEntry {\n    id\n    user\n    shift_length\n    shift_time\n    shift_date\n    shift_position\n    takehome\n    business_name\n    business_street_address\n    business_city\n    business_state\n    business_zip\n    neighborhood\n  }\n}\n`;\nexport const onUpdateTipEntry = `subscription OnUpdateTipEntry {\n  onUpdateTipEntry {\n    id\n    user\n    shift_length\n    shift_time\n    shift_date\n    shift_position\n    takehome\n    business_name\n    business_street_address\n    business_city\n    business_state\n    business_zip\n    neighborhood\n  }\n}\n`;\nexport const onDeleteTipEntry = `subscription OnDeleteTipEntry {\n  onDeleteTipEntry {\n    id\n    user\n    shift_length\n    shift_time\n    shift_date\n    shift_position\n    takehome\n    business_name\n    business_street_address\n    business_city\n    business_state\n    business_zip\n    neighborhood\n  }\n}\n`;\n","import React, { Component } from 'react';\nimport './App.css';\n\n//local imports\nimport TipInfoForm from './Components/TipInfoForm/TipInfoForm';\nimport Map from './Components/Map/map.js';  \nimport Search from './Components/Search/Search';\n\n// react-bootstrap\nimport Navbar from 'react-bootstrap/Navbar';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\n// View Component\n// import ViewTipInfo from './Components/ViewTipInfo/ViewTipInfo';\n// import PositionOption from './Components/ViewTipInfo/PositionOption';\n// import './Components/ViewTipInfo/ViewTipInfo.css';\n// import './Components/ProcessTips/ViewProcessedTips.css';\nimport ViewUserTips from './Components/ViewTipInfo/UserTipInfo';\nimport ViewTipInfoList from './Components/ViewTipInfo/ViewTipInfoList';\n\n//aws imports\nimport Amplify, { API, graphqlOperation, Auth } from 'aws-amplify';\nimport awsmobile from './aws-exports';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { Connect } from 'aws-amplify-react';\nimport aws_config from './aws-exports';\n\n//graphql related imports\nimport * as queries from './graphql/queries'\nimport * as subscriptions from './graphql/subscriptions'\n\nimport logo from './images/logo.png'\n\nAmplify.configure(awsmobile);\nAmplify.configure(aws_config);\n\n// component to get data from user / guest\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      curr_user_username: '',\n      // userProfile : \"\",\n      showListView: false,\n      showMapView: true,\n      showMyTipsView: false,\n      showSearchView: false,\n      detailList: false,\n      processFilter: \"Business\",\n      positionFilter: \"All Position\"\n    }\n\n    this.handleProcess = this.handleProcess.bind(this);\n    this.handlePosition = this.handlePosition.bind(this);\n    this.handleMapView = this.handleMapView.bind(this);\n    this.handleListView = this.handleListView.bind(this);\n    this.handleMyTipsView = this.handleMyTipsView.bind(this);\n    this.handleSearchQueryChange = this.handleSearchQueryChange.bind(this);\n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\n  }\n  \n  handleProcess =(event) => {\n    this.setState({\n      processFilter : event.target.value\n    })\n  }\n\n  handlePosition = (event) => {\n    this.setState({\n      positionFilter : event.target.value\n    })\n  }\n\n  handleSignOut = () => {\n    Auth.signOut()\n    .then(data => console.log(data))\n    .catch(err => console.log(err));\n  }\n\n  handleHomeView = () => {\n    this.setState({\n      showSignUp: false,\n      // userProfile : \"\",\n      showListView: false,\n      showMapView: true,\n      detailList: false,\n      processFilter: \"Business\",\n      positionFilter: \"All Position\",\n      showMyTipsView: false,\n      search_query: ''\n    })\n  }\n\n  handleMapView = () => {\n    this.setState({\n      showMapView: true,\n      showListView: false,\n      showMyTipsView: false,\n      showSearchView: false\n    })\n  }\n\n  handleListView = () => {\n    this.setState({\n      showMapView: false,\n      showListView: true,\n      showMyTipsView: false,\n      showSearchView: false\n    })\n  }\n\n  handleMyTipsView = () => {\n    this.setState({\n      showMapView: false,\n      showListView: false,\n      showMyTipsView: true,\n      showSearchView: false\n    })\n  }\n\n  handleSearchQueryChange = (e) => {\n    this.setState({\n      search_query: e.target.value\n    })\n  }\n\n  handleSearchSubmit = () => {\n    this.setState({\n      showMapView: false,\n      showListView: false,\n      showMyTipsView: false,\n      showSearchView: true\n    })\n  }\n\n  //updates db query with newly added items, used in subscriptions\n  onNewTipEntry = (prevQuery, newData) => {\n    let updatedQuery = Object.assign({}, prevQuery);\n    updatedQuery.listTipEntrys.items = \n      prevQuery.listTipEntrys.items.concat([newData.onCreateTipEntry]);\n      return updatedQuery;\n  }\n\n  async componentDidMount() {\n    let current_user = await Auth.currentAuthenticatedUser();\n    let un = current_user.username;\n    this.setState({\n      // userProfile: current_user, // TODO\n      curr_user_username: un\n    })\n  }\n\n  render() {\n\n    const search_query = this.state.search_query\n\n    const home = (\n      <Navbar className=\"bg-olive justify-content-between\">\n\n      <Navbar.Brand>\n        <a href='#' onClick={this.handleHomeView}>\n        <img \n        src={ logo }\n        width=\"200\"\n        height=\"64\"\n        className=\"d-inline-block align-top\"\n        alt=\"Pooled House logo\"\n        />\n        </a>\n\n      </Navbar.Brand>\n      \n        <Form inline>\n          <FormControl value={ search_query } type=\"text\" \n                       placeholder=\"ex: upper manhattan\" className=\"mr-sm\" \n                       onChange={ this.handleSearchQueryChange } />\n          <Button variant=\"outline-light\" onClick={ this.handleSearchSubmit }><span>{\"\\uD83D\\uDD0D\"}</span></Button>\n        </Form>\n\n        <ButtonGroup>\n          <Button variant=\"warning\" onClick={this.handleMapView}>Map</Button>\n          <Button variant=\"warning\" onClick={this.handleListView}>List</Button>\n        </ButtonGroup>\n\n        <ButtonToolbar>\n          <Button id='ur_nav' onClick={this.handleMyTipsView}>\n          {this.state.curr_user_username}'s Tips\n          </Button>\n          <Button id='ur_nav' onClick={this.handleSignOut}>\n            Sign Out\n          </Button>\n        </ButtonToolbar>\n      </Navbar>\n      );\n\n      const viewData = (\n        //the connect component queries our database\n        <Connect query={graphqlOperation(queries.listTipEntrys)}\n                 subscription={graphqlOperation(subscriptions.onCreateTipEntry)}\n                 onSubscriptionMsg={this.onNewTipEntry}>\n        {({ data: { listTipEntrys }, loading, error }) => {\n            if (error) return (<h3>Error</h3>);\n            if (loading || !listTipEntrys) return (<h3>Loading...</h3>);\n            return (\n              <ViewTipInfoList \n                tip_info={listTipEntrys.items} />\n            )\n        }}\n        </Connect>\n      );\n\n      let mapData = (\n        <Connect query={graphqlOperation(queries.listTipEntrys)}\n                 subscription={graphqlOperation(subscriptions.onCreateTipEntry)}\n                 onSubscriptionMsg={this.onNewTipEntry}>\n        {({ data: { listTipEntrys }, loading, error }) => {\n            if (error) return (<h3>Error</h3>);\n            if (loading || !listTipEntrys) return (<h3>Loading...</h3>);\n            return (\n              <div>\n                  <Map tip_info={listTipEntrys ? listTipEntrys.items : []} />\n              </div>\n            )\n        }}\n        </Connect>\n      )\n\n      const viewMyTips = (\n        <div>\n        <TipInfoForm />\n        <Connect query={graphqlOperation(queries.listTipEntrys)}\n                 subscription={graphqlOperation(subscriptions.onCreateTipEntry)}\n                 onSubscriptionMsg={this.onNewTipEntry}>\n        {({ data: { listTipEntrys }, loading, error }) => {\n            if (error) return (<h3>Error</h3>);\n            if (loading || !listTipEntrys) return (<h3>Loading...</h3>);\n            return (\n              <ViewUserTips \n                tipInfo={listTipEntrys.items} \n                user={this.state.curr_user_username}\n                />\n            )\n        }}\n        </Connect>\n        </div>\n      )\n\n      const viewSearch = (\n        <Connect query={graphqlOperation(queries.listTipEntrys)}\n                 subscription={graphqlOperation(subscriptions.onCreateTipEntry)}\n                 onSubscriptionMsg={this.onNewTipEntry}>\n        {({ data: { listTipEntrys }, loading, error }) => {\n          if (error) return (<h3>Error</h3>);\n          if (loading || !listTipEntrys) return (<h3>Loading...</h3>);\n          return (\n            <div>\n                <Search tip_info={listTipEntrys ? listTipEntrys.items : []} \n                        search_query={this.state.search_query} />\n            </div>\n          )\n        }}\n        </Connect>\n      )\n\n    let multiView = '';\n\n    if (this.state.showMapView) {\n      multiView = mapData;\n    } else if (this.state.showListView) {\n      multiView = viewData;\n    } else if (this.state.showSearchView) {\n      multiView = viewSearch;\n    } else {\n      multiView = viewMyTips;\n    }\n\n    return (\n      <div className=\"App\">\n        <div id=\"home\"> { home } </div>\n        <div className=\"tipsView\"> { multiView } </div>\n      </div>\n    );\n  }\n}\n\nexport default withAuthenticator(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const EMERALD_GREEN = \"#1a9850\";        // lvl (6/6)\nconst PARAKEET_GREEN = \"#91cf60\";       // lvl (5/6)\nconst LIME_GREEN = \"#d9ef8b\";           // lvl (4/6)\nconst CRIMSON_RED = \"#d73027\";          // lvl (3/6)\nconst ORANGE = \"#fc8d59\";               // lvl (2/6)\nconst NAVAJO_WHITE = \"#fee08b\";         // lvl (1/6)\n\nconst getColor = (amount) => {\n    if (amount < 15) return ORANGE;\n    if (amount < 30) return CRIMSON_RED;\n    if (amount < 45) return LIME_GREEN;\n    if (amount < 60) return PARAKEET_GREEN;\n    return EMERALD_GREEN;\n}\n\n// pre: a number as a param\n// post: return an integer between [1,6]\nconst getLevel = (amount, max) =>{\n    return Math.floor((amount*7)/max);\n}\n\n//this function takes db tipentry list and returns an object containing neighborhood name, avg tips/hour, total hours\n//deprecated\nconst averageTipsByNeighborhood = (tip_info) => {\n//    console.log(tip_info);\n    const neighborhoods = new Object();\n    tip_info.forEach(entry => {\n        let hoodName = entry.neighborhood;\n        if (! neighborhoods.hasOwnProperty(hoodName)) {\n            neighborhoods[hoodName] = {neighborhood: hoodName,\n                                    tipsPerHour: (entry.takehome / entry.shift_length),\n                                    totalHour: entry.shift_length};\n        }\n        else {\n            let hours = (neighborhoods[hoodName].totalHour + entry.shift_length);\n            neighborhoods[hoodName].tipsPerHour = neighborhoods[hoodName].tipsPerHour * neighborhoods[hoodName].totalHour / hours + entry.takehome / hours;\n            neighborhoods[hoodName].totalHour = hours;\n        }\n    });\n    return neighborhoods;\n}\n\n//this function works just like averageTipsByNeighborhood, but filters by day of week.\n//deprecated\nconst aTBNDayParse = (tip_info, day) => {\n//    console.log(tip_info);\n    const neighborhoods = new Object();\n    tip_info.forEach(entry => {\n        let e_day = new Date(entry.shift_date).getDay();\n        e_day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][e_day];\n        if (e_day == day) {\n            let hoodName = entry.neighborhood;\n            if (! neighborhoods.hasOwnProperty(hoodName)) {\n                neighborhoods[hoodName] = {neighborhood: hoodName,\n                                        tipsPerHour: (entry.takehome / entry.shift_length),\n                                        totalHour: entry.shift_length};\n            }\n            else {\n                let hours = (neighborhoods[hoodName].totalHour + entry.shift_length);\n                neighborhoods[hoodName].tipsPerHour = neighborhoods[hoodName].tipsPerHour * neighborhoods[hoodName].totalHour / hours + entry.takehome / hours;\n                neighborhoods[hoodName].totalHour = hours;\n            }\n        }\n    });\n    return neighborhoods;\n}\n\n//this works like the original averageTipByNeighborhood, but filters by day, shift, and position.\nexports.aTBNMasterParse = (tip_info, day, shift, position) => {\n//    console.log(tip_info);\n    const neighborhoods = new Object();\n    tip_info.forEach(entry => {\n        let e_day = new Date(entry.shift_date).getDay();\n        e_day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][e_day];\n        if ((day == 'All' || e_day == day) && \n            (shift == 'All' ||  entry.shift_time == shift) && \n            (position == 'All' || entry.shift_position == position)) {\n\n                let hoodName = entry.neighborhood;\n                if (! neighborhoods.hasOwnProperty(hoodName)) {\n                    neighborhoods[hoodName] = {neighborhood: hoodName,\n                                            tipsPerHour: (entry.takehome / entry.shift_length),\n                                            totalHour: entry.shift_length};\n                }\n                else {\n                    let hours = (neighborhoods[hoodName].totalHour + entry.shift_length);\n                    neighborhoods[hoodName].tipsPerHour = neighborhoods[hoodName].tipsPerHour * neighborhoods[hoodName].totalHour / hours + entry.takehome / hours;\n                    neighborhoods[hoodName].totalHour = hours;\n                }\n        }\n    });\n    return neighborhoods;\n}\n\n\n//takes the neighborhoods object returns by averageTipsByNeighborhood and returns an object for use by reactnyc component\nexports.averageTipsClean = (average_tips) => {\n    let data = [];\n    let element = {};\n    for (var entry in average_tips) {\n      element = {};\n      element.name = average_tips[entry].neighborhood;\n      element.values = [];\n      element.values.push({label: \"Avg Hourly $\", val: Math.floor(average_tips[entry].tipsPerHour)});\n      //console.log(element.values[0].val);\n      element.color = getColor(element.values[0].val);\n      data.push(element);\n    }\n    return data;\n}\n\nexports.getColor = getColor;","/** ProcessTips component is designed to compute the average tips\r\n * depending on which option the user selects to filter; by business,\r\n * by day, by position, by zipcode, or by shift. This component is still\r\n * unfinished.\r\n */\r\n\r\n\r\n// data will be process here\r\n// filter all the data based on business name\r\n// take the average\r\n// for each position\r\n// tips total = takeHome * hour\r\n// average total by total employee count\r\n\r\n// shift_length\r\n// shift_time\r\n// shift_date\r\n// shift_position\r\n// takehome\r\n// business_name\r\n// business_street_address\r\n// business_city\r\n// business_state\r\n// business_zip\r\n\r\nexports.averageTipsByBusiness = (tipsInfo) => {\r\n    // let tipInfo = [...props.tipInfo];\r\n    const business = {};\r\n    tipsInfo.forEach(tips => {\r\n        let businessName = tips.business_name;\r\n        if (! business.hasOwnProperty(businessName)) {\r\n            business[businessName] = {business_name: businessName,\r\n                                    business_street_address: tips.business_street_address + \", \" + tips.business_city + \", \" + tips.business_state + \" \" + tips.business_zip, \r\n                                    tipsPerHour: (tips.takehome / tips.shift_length),\r\n                                    totalHour: tips.shift_length};\r\n        }\r\n        else {\r\n            let hours = (business[businessName].totalHour + tips.shift_length);\r\n            business[businessName].tipsPerHour = business[businessName].tipsPerHour * business[businessName].totalHour / hours + tips.takehome / hours;\r\n            business[businessName].totalHour = hours;\r\n        }\r\n    });\r\n    return business;\r\n}\r\n\r\nconst getDay = (date) => {\r\n    let day = date.getDay();\r\n    if(day === 0) {\r\n        return \"Sunday\";\r\n    }\r\n    else if (day === 1) {\r\n        return \"Monday\";\r\n    }\r\n    else if (day === 2) {\r\n        return \"Tuesday\";\r\n    }\r\n    else if (day === 3) {\r\n        return \"Wednesday\"\r\n    }\r\n    else if (day === 4) {\r\n        return \"Thursday\";\r\n    }\r\n    else if (day === 5) {\r\n        return \"Friday\";\r\n    }\r\n    else if (day === 6) {\r\n        return \"Sunday\";\r\n    }\r\n}\r\n\r\nexports.averageTipsByBusinessDay = (tipsInfo) => {\r\n    const businessTipsByday = {};\r\n    tipsInfo.forEach(tips => {\r\n        let businessName = tips.business_name;\r\n        let day = getDay(new Date(tips.shift_date));\r\n        if (! businessTipsByday.hasOwnProperty(businessName)) {\r\n            let avg = {\r\n                        tipsPerHour: (tips.takehome / tips.shift_length),\r\n                        totalHour: tips.shift_length,\r\n                    };\r\n                    \r\n            businessTipsByday[businessName] = {\r\n                Saturday: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Sunday: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Monday: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Tuesday: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Wednesday: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Thursday: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Friday: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                }\r\n            }; \r\n\r\n            businessTipsByday[businessName][day] = avg;\r\n            businessTipsByday[businessName].address = tips.business_street_address + \", \" + tips.business_city + \", \" + tips.business_state + \" \" + tips.business_zip;\r\n        }\r\n        else {\r\n            // if(!businessTipsByday[businessName].hasOwnProperty(day)) {\r\n\r\n\r\n            // }\r\n            let hours = (businessTipsByday[businessName][day].totalHour + tips.shift_length);\r\n            businessTipsByday[businessName][day].tipsPerHour = businessTipsByday[businessName][day].tipsPerHour * businessTipsByday[businessName][day].totalHour / hours + tips.takehome / hours;\r\n            businessTipsByday[businessName][day].totalHour = hours;\r\n        }\r\n    });\r\n    return businessTipsByday;\r\n}\r\n\r\nexports.averageTipsByPosition = (tipsInfo) => {\r\n    const businessTipsByPos = {};\r\n    tipsInfo.forEach(tips => {\r\n        let businessName = tips.business_name;\r\n        let pos = tips.shift_position;\r\n        if (! businessTipsByPos.hasOwnProperty(businessName)) {\r\n            let avg = {\r\n                        tipsPerHour: (tips.takehome / tips.shift_length),\r\n                        totalHour: tips.shift_length,\r\n                    };\r\n                    \r\n            businessTipsByPos[businessName] = {\r\n                Bartender: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Server: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Barback: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Busser: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                },\r\n                Other: {\r\n                    tipsPerHour: 0,\r\n                    totalHour: 0,\r\n                }\r\n            }; \r\n\r\n            businessTipsByPos[businessName][pos] = avg;\r\n            businessTipsByPos[businessName].address = tips.business_street_address + \", \" + tips.business_city + \", \" + tips.business_state + \" \" + tips.business_zip;\r\n        }\r\n        else {\r\n            // if(!businessTipsByday[businessName].hasOwnProperty(day)) {\r\n\r\n\r\n            // }\r\n            let hours = (businessTipsByPos[businessName][pos].totalHour + tips.shift_length);\r\n            businessTipsByPos[businessName][pos].tipsPerHour = businessTipsByPos[businessName][pos].tipsPerHour * businessTipsByPos[businessName][pos].totalHour / hours + tips.takehome / hours;\r\n            businessTipsByPos[businessName][pos].totalHour = hours;\r\n        }\r\n    });\r\n    return businessTipsByPos;\r\n}\r\n\r\nexports.averageTipsByZipCode = (tipsInfo) => {\r\n    const businessZip = {};\r\n    const ZipBusinessCount = {};\r\n    tipsInfo.forEach(tips => {\r\n        let zip = tips.business_zip;\r\n        if (! businessZip.hasOwnProperty(zip)) {\r\n            ZipBusinessCount[zip] = new Set();\r\n            ZipBusinessCount[zip].add(tips.business_name);\r\n            businessZip[zip] = {\r\n                business_count: 1,\r\n                tipsPerHour: (tips.takehome / tips.shift_length),\r\n                totalHour: tips.shift_length};\r\n        }\r\n        else {\r\n            let hours = (businessZip[zip].totalHour + tips.shift_length);\r\n            ZipBusinessCount[zip].add(tips.business_name);\r\n            businessZip[zip].business_count = ZipBusinessCount[zip].size;\r\n            businessZip[zip].tipsPerHour = businessZip[zip].tipsPerHour * businessZip[zip].totalHour / hours + tips.takehome / hours;\r\n            businessZip[zip].totalHour = hours;\r\n        }\r\n    });\r\n    return businessZip;    \r\n\r\n}\r\n\r\nexports.averageTipsByPositionAndShift = (tipsInfo) => {\r\n\r\n}\r\n\r\n// export {averageTipsByBusiness, averageTipsByBusinessDay, averageTipsByPosition};"],"sourceRoot":""}